/*! calendar-price-jquery v1.4.2 | (c) capricorncd | https://github.com/capricorncd/calendar-price-jquery */
"use strict";
! function($) {
  var formatNumber = function(t) {
      return (t = t.toString())[1] ? t : "0" + t
    },
    toNumber = function(t) {
      return t = parseInt(t), isNaN(t) ? 0 : t
    },
    isValid = function(t) {
      return !!/^(\d{4})[-\/\.](\d{1,2})[-\/\.](\d{1,2})/.test(t) && RegExp.$1 + "-" + formatNumber(RegExp.$2) + "-" + formatNumber(RegExp.$3)
    },
    formatDate = function(t, e) {
      /(y+)/i.test(e) && (e = e.replace(RegExp.$1, (t.getFullYear() + "").substr(4 - RegExp.$1.length)));
      var a = {
        "M+": t.getMonth() + 1,
        "d+": t.getDate(),
        "h+": t.getHours(),
        "m+": t.getMinutes(),
        "s+": t.getSeconds()
      };
      for (var r in a)
        if (new RegExp("(" + r + ")").test(e)) {
          var n = a[r] + "";
          e = e.replace(RegExp.$1, 1 === RegExp.$1.length ? n : formatNumber(n))
        } return e
    };

  function isLeIE9() {
    var t = navigator.userAgent,
      e = null;
    return /MSIE (\d+)\./i.test(t) && (e = RegExp.$1), e && +e <= 9
  }
  var BC = (k = {}, {
      ev: k,
      $on: function(t, e) {
        return "string" == typeof t && "function" == typeof e && (k[t] = {
          fun: e
        }), this
      },
      $emit: function(t) {
        var e = Array.prototype.slice.call(arguments, 1);
        return k[t].fun.apply(k[t].scope, e), this
      }
    }),
    k;

  function createSettingWindow() {
    var t = document.createElement("div");
    return t.className = "capricorncd-date-detailed-settings" + (isLeIE9() ? " ie" : ""), t.style.display = "none", $(t)
  }

  function verticalCenter(t) {
    if (isLeIE9()) {
      var e = t.height(),
        a = $(window).height();
      t.css("top", (a - e) / 2 + "px")
    }
  }
  var CODES = {
      1: '参数错误(el: "selector"): 未配置日历显示的容器选择器!',
      2: "{{text}}: 日期格式不合法!",
      3: "设置的日期范围或初始化的日期范围，与设置的周{{text}}没有交集",
      4: "开始日期格式错误",
      5: "开始日期不能小于今天",
      6: "结束日期格式错误",
      7: "结束日期不能小于开始日期",
      8: "sort(arg)方法的参数arg为非数组",
      9: "update(data) 参数data必须为数组"
    },
    TODAY = new Date,
    today = formatDate(TODAY, "yyyy-MM-dd"),
    ONE_DAY_MSEC = 864e5,
    tomorrow = formatDate(new Date(Date.parse(TODAY) + ONE_DAY_MSEC), "yyyy-MM-dd"),
    currentMonthData = {
      year: null,
      month: null,
      data: []
    },
    DEFAULTS = {
      data: [],
      month: formatDate(TODAY, "yyyy/MM"),
      startDate: formatDate(TODAY, "yyyy/MM/dd"),
      endDate: null,
      cancel: function() {},
      callback: function() {},
      reset: function() {},
      monthChange: function() {},
      error: function() {},
      hideFooterButton: !1,
      style: {
        bgColor: "#fff"
      },
      disableSetup: !1
    },
    currentDay = null;

  function _err(t, e) {
    return {
      code: t,
      msg: e || CODES[t]
    }
  }

  function CalendarPrice(t) {
    this.opts = $.extend({}, DEFAULTS, t), this.ev = BC.ev, this.$on = BC.$on, this.$emit = BC.$emit, this.init()
  }
  var fn = CalendarPrice.prototype,
    $dateSetContainer;

  function _createDays() {
    for (var t = "", e = 1; e <= 31; e++) t += '<i class="_checkbox">' + formatNumber(e) + "</i>";
    return t
  }

  function log() {
    for (var t = 0; t < arguments.length; t++) console.log(arguments[t])
  }
  fn._formatThisMonth = function(t) {
    var e = null;
    return (e = /^(\d{4})[-\.\/](\d{1,2})/.test(t) ? this.dateToObject(RegExp.$1 + "/" + RegExp.$2) : this.dateToObject(formatDate(TODAY, "yyyy/MM"))) <= this.endDate && e >= this.startDate ? e : this.dateToObject(formatDate(this.startDate, "yyyy/MM"))
  }, fn.init = function() {
    if (!this.opts.el) throw new Error(CODES[1]);
    this.calendar = $(this.opts.el), this.settingWindow = createSettingWindow(), this.createStyleCode(), this.startDate = this._getStartDate(), this.endDate = this._getEndDate(), this.data = this._getOptionsData(), this.month = this._formatThisMonth(this.opts.month), this.initSettingWindow(), this.createCalendar(), this.handleClickEvent()
  }, fn._prevMonth = function() {
    var t = toNumber(formatDate(this.month, "yyyy")),
      e = toNumber(formatDate(this.month, "MM"));
    this.month = 1 === e ? this.dateToObject(t - 1 + "/12") : this.dateToObject(t + "/" + (e - 1)), this.createCalendar()
  }, fn._nextMonth = function() {
    var t = toNumber(formatDate(this.month, "yyyy")),
      e = toNumber(formatDate(this.month, "MM"));
    this.month = 12 === e ? this.dateToObject(t + 1 + "/01") : this.dateToObject(t + "/" + (e + 1)), this.createCalendar()
  }, fn._getStartDate = function() {
    var t = this.dateToObject(this.opts.startDate);
    return t && TODAY <= t ? t : TODAY
  }, fn._getEndDate = function() {
    var t = this.opts.endDate,
      e = null,
      a = null,
      r = null;
    return /^(\d{4})[-\.\/](\d{1,2})/.test(t) && (e = RegExp.$1, a = toNumber(RegExp.$2)), e && a || (e = toNumber(formatDate(TODAY, "yyyy")) + 1, a = toNumber(formatDate(TODAY, "MM"))), r = /^\d{4}[-\.\/]\d{1,2}[-\.\/](\d{1,2})/.test(t) ? RegExp.$1 : new Date(Date.parse(new Date(e, a)) - ONE_DAY_MSEC).getDate(), this.dateToObject(e + "/" + a + "/" + r)
  }, fn.dateToObject = function(t) {
    var e = "";
    if (/(\d{4})[-\/\.](\d{1,2})[-\/\.]?/.test(t) && (e += RegExp.$1 + "/" + RegExp.$2), /[-\/\.]\d{1,2}[-\/\.](\d{1,2})/.test(t) ? e += "/" + RegExp.$1 : e += "/01", /\d{4}\/\d{1,2}\/\d{1,2}/.test(e)) return new Date(e);
    var a = CODES[2].replace("{{text}}", t);
    return this.ev.error && this.$emit("error", _err(2, a)), this.opts.error(_err(2, a)), !1
  }, fn.createCalendar = function() {
    var t = !0,
      e = !0,
      a = formatDate(this.month, "yyyyMM");
    a <= formatDate(this.startDate, "yyyyMM") && (t = !1), formatDate(this.endDate, "yyyyMM") <= a && (e = !1);
    var r = "";
    r += '<div class="capricorncd-calendar-container">', r += '\t<div class="calendar-head-wrapper">', t && (r += '       <a class="prev-month" title="上一月"></a>'), r += '\t\t<div class="calendar-month-title">' + formatDate(this.month, "yyyy年MM月") + "</div>", e && (r += '       <a class="next-month" title="下一月"></a>'), r += "\t</div>", r += '\t<div class="calendar-table-wrapper">', r += '  \t    <table cellpadding="4" cellspacing="0">', r += '\t\t    <thead><tr class="week"><th class="weekend">日</th><th>一</th><th>二</th><th>三</th><th>四</th><th>五</th><th class="weekend">六</th></tr></thead>', r += "\t\t    <tbody>" + this._createTbody() + "</tbody>", r += "\t    </table>", r += "    </div>", this.opts.hideFooterButton || (r += '    <div class="calendar-foot-wrapper">', r += '        <button class="btn bg-success btn-reset">重置</button>', r += '        <button class="btn bg-primary btn-confirm">确定</button>', r += '        <button class="btn bg-white btn-cancel">取消</button>', r += "    </div>"), r += "</div>", this.calendar.html(r), this.renderDataToTalbe()
  }, fn._createTbody = function() {
    var t = this._getMonthDays(),
      e = this.month.getDay(),
      a = 0,
      r = Math.ceil((t + e) / 7),
      n = "",
      o = "",
      i = formatDate(this.startDate, "yyyy-MM-dd"),
      c = formatDate(this.endDate, "yyyy-MM-dd");
    currentMonthData.lastDay = t, currentMonthData.year = this.month.getFullYear(), currentMonthData.month = this.month.getMonth() + 1, currentMonthData.data = [];
    for (var s = {}, d = 0; d < r; d++) {
      o += "<tr>";
      for (var l = 1; l <= 7; l++) 0 < (a = 7 * d + l - e) && a <= t ? (s = {
        week: l - 1,
        day: a,
        disabled: !1
      }, n = formatDate(this.month, "yyyy-MM-") + formatNumber(a), today === n && (a = "今天"), tomorrow === n && (a = "明天"), i <= n && n <= c ? o += '<td class="valid-hook" data-week="' + (l - 1) + '" data-id="' + n + '"><b>' + a + '</b><div class="data-hook"></div></td>' : (o += '<td class="disabled"><b>' + a + "</b></td>", s.disabled = !0), currentMonthData.data.push(s)) : o += "<td>&nbsp;</td>";
      o += "</tr>"
    }
    return o
  }, fn.renderDataToTalbe = function() {
    var e = this,
      a = null,
      r = "";
    this.calendar.find(".valid-hook").each(function() {
      if (a = e._getDateData($(this).data("id")), r = e.dayTemplate().toString(), a) {
        for (var t in a) r = r.replace("{" + t + "}", a[t]);
        $(this).data("data", JSON.stringify(a)).find(".data-hook").html(r)
      } else $(this).data("data", "{}")
    })
  }, fn._getDateData = function(t) {
    for (var e, a = 0; a < this.data.length; a++)
      if (t === (e = this.data[a]).date) return e;
    return null
  }, fn._getMonthDays = function() {
    var t = this.month,
      e = formatDate(t, "yyyy"),
      a = formatDate(t, "MM");
    return 12 == +a ? 31 : new Date(Date.parse(new Date(e, a, 1)) - ONE_DAY_MSEC).getDate()
  }, fn.initSettingWindow = function() {
    var t = "";
    t += '<div class="cddsw-container">', t += '   <div class="cddsw-head-wrapper">', t += '       <div class="cddsw-title">设置</div>', t += '       <a class="cddsw-close"><i></i></a>', t += "   </div>", t += '   <ul class="cddsw-form-wrapper clearfix">', t += this._createDaySetupInputGroup(), t += "   </ul>", t += '   <fieldset class="cddsw-batch-settings clearfix">', t += '       <legend class="bs-title"><b>批量设置</b></legend>', t += '       <div class="bs-content">', t += '           <div class="bs-lable">日期范围</div>', t += '           <div class="bs-options-wrapper">', t += '               <input class="itext" name="startDay" type="date">', t += '               <span class="white-space">-</span>', t += '               <input class="itext" name="endDay" type="date">', t += "           </div>", t += "       </div>", t += '       <div class="bs-content bs-week-chekbox">', t += '           <div class="bs-lable">设置星期</div>', t += '           <div class="bs-options-wrapper">', t += '               <i class="_checkbox" data-value="1">周一</i>', t += '               <i class="_checkbox" data-value="2">周二</i>', t += '               <i class="_checkbox" data-value="3">周三</i>', t += '               <i class="_checkbox" data-value="4">周四</i>', t += '               <i class="_checkbox" data-value="5">周五</i>', t += '               <i class="_checkbox" data-value="6">周六</i>', t += '               <i class="_checkbox" data-value="0">周日</i>', t += "           </div>", t += "       </div>", t += '       <div class="bs-content bs-days-select">', t += '           <div class="bs-lable">指定日期</div>', t += '           <div class="bs-options-wrapper">' + _createDays() + "</div>", t += "       </div>", t += "   </fieldset>", t += '   <div class="cddsw-foot-wrapper">', t += '       <button class="btn-confirm">确定</button>', t += '       <button class="btn-cancel">关闭</button>', t += "   </div>", t += "</div>", this.settingWindow.html(t), $("body").append(this.settingWindow)
  }, fn._createDaySetupInputGroup = function() {
    for (var t, e = "", a = this.opts.config, r = 0; r < a.length; r++) {
      var n = a[r];
      console.log(n), !1 !== n.editable && (t = n.disabled ? "disabled" : "", e += "<li>", e += "   <label>" + n.name + "</label>", e += '   <input name="' + n.key + '" placeholder="' + n.placeholder + '" type="' + (n.type || "text") + '" ' + t + ">", e += "</li>")
    }
    return e
  }, fn.dayTemplate = function() {
    var t = this.opts.show,
      e = "";
    if (t && t instanceof Array)
      for (var a = 0; a < t.length; a++) {
        var r = t[a];
        e += "<p>" + r.name + "{" + r.key + "}</p>"
      }
    return e
  }, fn.handleClickEvent = function() {
    var a, c = this;
    $dateSetContainer = this.settingWindow.find(".cddsw-container");
    var r = !1;

    function t(t, e) {
      c.settingWindow.find('.cddsw-form-wrapper [type="text"]').val(""), c.settingWindow.find('[name="enableDateRange"]').prop("checked", !1), c.settingWindow.find('[name="setWeek"]').prop("checked", !1), $.each(t, function(t, e) {
        c.settingWindow.find('[name="' + t + '"]').val(e)
      }), c.settingWindow.find('[name="startDay"], [name="endDay"]').val(e), a = c.settingWindow.find(".bs-days-select .bs-options-wrapper"), c.settingWindow.show(), verticalCenter(c.settingWindow.find(".cddsw-container")), r = !1, a.removeClass("disabled-options"), c.settingWindow.find(".bs-week-chekbox ._active").removeClass("_active")
    }

    function e() {
      r = !0, a.addClass("disabled-options")
    }

    function s() {
      var t = [];
      return $dateSetContainer.find(".bs-days-select ._active").each(function() {
        t.push($(this).text())
      }), t
    }

    function d() {
      var t = [];
      return $dateSetContainer.find(".bs-week-chekbox ._active").each(function() {
        t.push($(this).data("value"))
      }), t
    }

    function l(t) {
      var e = [],
        a = c.handleSetDateRangeData(t.startDay, t.endDay);
      if (a && (e = a), 0 < t.weeks.length) {
        var r = c.handleSetWeekData(t.weeks, e);
        e = e.concat(r)
      } else {
        var n = c.handleSetDaysData(t.days, e);
        e = e.concat(n)
      }
      c.handleThisData(t.formData, e)
    }
    this.calendar.on("click", ".prev-month", function() {
      var t = c.getMonthData();
      c.ev["month-change"] && c.$emit("month-change", t), c.opts.monthChange(t), c._prevMonth()
    }), this.calendar.on("click", ".next-month", function() {
      var t = c.getMonthData();
      c.ev["month-change"] && c.$emit("month-change", t), c.opts.monthChange(t), c._nextMonth()
    }), this.calendar.on("click", ".btn-reset", function() {
      c.ev.reset && c.$emit("reset"), c.data = c._getOptionsData(), c.createCalendar(), c.opts.reset()
    }), this.calendar.on("click", ".btn-confirm", function() {
      c.ev.confirm && c.$emit("confirm", c.data), c.opts.callback(c.data)
    }), this.calendar.on("click", ".btn-cancel", function() {
      c.ev.cancel && c.$emit("cancel"), c.opts.cancel()
    }), this.calendar.on("click", ".valid-hook", function() {
      if (!c.opts.disableSetup) {
        currentDay = $(this).data("id");
        var e = $(this).data("data");
        try {
          e = JSON.parse(e)
        } catch (t) {
          e = {}
        }
        c.opts.everyday ? c.opts.everyday(e) : c.ev["valid-day"] ? c.$emit("valid-day", currentDay, e, function() {
          t(e, currentDay)
        }) : t(e, currentDay)
      }
    }), this.settingWindow.on("click", ".bs-week-chekbox ._checkbox", function() {
      var t = $(this);
      t.hasClass("_active") ? (t.removeClass("_active"), t.siblings("._active").length ? e() : (r = !1, a.removeClass("disabled-options"))) : (t.addClass("_active"), e());
      c.ev["setup-value-change"] && c.$emit("setup-value-change", {
        $el: t,
        name: "weeks",
        value: d()
      })
    }), this.settingWindow.on("click", ".bs-days-select ._checkbox", function() {
      var t = $(this);
      r || t.hasClass("_disabled") || (t.hasClass("_active") ? t.removeClass("_active") : t.addClass("_active"), c.ev["setup-value-change"] && c.$emit("setup-value-change", {
        $el: t,
        name: "days",
        value: s()
      }))
    }), this.settingWindow.on("click", ".cddsw-close, .btn-cancel", function() {
      c.ev["setup-close"] && c.$emit("setup-close"), c.settingWindow.hide()
    }), this.settingWindow.on("click", ".btn-confirm", function() {
      var a = {};
      $dateSetContainer.find(".cddsw-form-wrapper [name]").each(function() {
        var t = $(this).attr("name"),
          e = $(this).val();
        a[t] = e
      });
      var t = $(".cddsw-batch-settings"),
        e = t.find('[name="startDay"]').val(),
        r = t.find('[name="endDay"]').val(),
        n = d(),
        o = s(),
        i = {
          formData: a,
          startDay: e,
          endDay: r,
          weeks: n,
          days: o
        };
      c.ev.hasOwnProperty("submit-form") ? c.$emit("submit-form", i, function() {
        l(i)
      }) : l(i)
    }), this.settingWindow.on("change", "input", function() {
      var t = $(this),
        e = {
          name: t.attr("name"),
          value: t.val(),
          $el: t
        };
      c.ev["setup-value-change"] && c.$emit("setup-value-change", e)
    })
  }, fn._createDateRangeArr = function(t, e) {
    for (var a = [], r = Date.parse(this.dateToObject(t)), n = Date.parse(this.dateToObject(e)), o = Math.floor((n - r) / ONE_DAY_MSEC) + 1, i = 0; i < o; i++) {
      var c = new Date(r + ONE_DAY_MSEC * i);
      a.push(formatDate(c, "yyyy-MM-dd"))
    }
    return a
  }, fn.handleSetDateRangeData = function(t, e) {
    var a = [],
      r = isValid(t),
      n = isValid(e);
    return r ? (n || (n = r, this.ev.error && this.$emit("error", _err(6)), this.opts.error(_err(6))), n < r ? (this.ev.error && this.$emit("error", _err(7)), this.opts.error(_err(7)), null) : (r === n ? a.push(r) : a = this._createDateRangeArr(r, n), a)) : (this.ev.error && this.$emit("error", _err(4)), this.opts.error(_err(4)), null)
  }, fn._getInitDaysRange = function() {
    for (var t, e = [], a = this.startDate.getTime(), r = (this.endDate.getTime() - a) / ONE_DAY_MSEC + 1, n = 0; n < r; n++) t = new Date(a + n * ONE_DAY_MSEC), e.push(formatDate(t, "yyyy-MM-dd"));
    return e
  }, fn.handleSetWeekData = function(r, t) {
    var n = this,
      o = [],
      e = t.length <= 1 ? this._getInitDaysRange() : t;
    return $.each(e, function(t, e) {
      var a = n.dateToObject(e).getDay(); - 1 < r.join(",").indexOf(a) && o.push(e)
    }), o
  }, fn.handleSetDaysData = function(t, e) {
    var r = [],
      a = e.length <= 1 ? this._getInitDaysRange() : e,
      n = t.join(",");
    return $.each(a, function(t, e) {
      var a = e.substr(e.length - 2); - 1 < n.indexOf(a) && r.push(e)
    }), r
  }, fn.handleThisData = function(t, e) {
    var a = e || [],
      r = a.length;
    if (0 === r) t.date = currentDay, this._updateThisData(t);
    else
      for (var n = 0; n < r; n++) this._updateThisData(t, a[n]);
    this.data = this.sort(this.rmRepeat(this.data, "date")), this.renderDataToTalbe(), this.settingWindow.hide()
  }, fn._updateThisData = function(t, e) {
    var a = this,
      r = !1,
      n = {};
    n.date = e || t.date, $.each(t, function(t, e) {
      "date" != t && (n[t] = e)
    }), $.each(this.data, function(t, e) {
      if (n.date === e.date) return r = !0, a.data[t] = n, !1
    }), r || this.data.push(n)
  }, fn._getOptionsData = function() {
    var a = formatDate(this.startDate, "yyyy-MM-dd"),
      r = formatDate(this.endDate, "yyyy-MM-dd"),
      n = [];
    return $.each(this.opts.data, function(t, e) {
      e.date >= a && e.date <= r && n.push(e)
    }), this.sort(this.rmRepeat(n, "date"))
  }, fn.createStyleCode = function() {
    var style = this.opts.style || {},
      count = 0;
    for (var key in style)
      if (count++, 0 < count) break;
    if (count) {
      var defaultStyle = {
          headerBgColor: "#098cc2",
          headerTextColor: "#fff",
          weekBgColor: "#098cc2",
          weekTextColor: "#fff",
          weekendBgColor: "#098cc2",
          weekendTextColor: "#fff",
          validDateTextColor: "#333",
          validDateBgColor: "#fff",
          validDateBorderColor: "#eee",
          validDateHoverBgColor: "#098cc2",
          validDateHoverTextColor: "#fff",
          invalidDateTextColor: "#ccc",
          invalidDateBgColor: "#fff",
          invalidDateBorderColor: "#eee",
          footerBgColor: "#fff",
          resetBtnBgColor: "#77c351",
          resetBtnTextColor: "#fff",
          resetBtnHoverBgColor: "#55b526",
          resetBtnHoverTextColor: "#fff",
          confirmBtnBgColor: "#098cc2",
          confirmBtnTextColor: "#fff",
          confirmBtnHoverBgColor: "#00649a",
          confirmBtnHoverTextColor: "#fff",
          cancelBtnBgColor: "#fff",
          cancelBtnBorderColor: "#bbb",
          cancelBtnTextColor: "#999",
          cancelBtnHoverBgColor: "#fff",
          cancelBtnHoverBorderColor: "#bbb",
          cancelBtnHoverTextColor: "#666"
        },
        concatStyle = $.extend({}, defaultStyle, this.opts.style),
        templateStyle = ".capricorncd-calendar-container .calendar-head-wrapper, .capricorncd-date-detailed-settings .cddsw-container .cddsw-head-wrapper{background-color: {headerBgColor}}.capricorncd-calendar-container .calendar-head-wrapper .calendar-month-title, .capricorncd-date-detailed-settings .cddsw-container .cddsw-head-wrapper .cddsw-title{color: {headerTextColor};}.capricorncd-calendar-container .calendar-table-wrapper table .week{background-color:{weekBgColor};color:{weekTextColor}};.capricorncd-calendar-container .calendar-table-wrapper table .week th.weekend{background-color:{weekendBgColor};color:{weekendTextColor}}.capricorncd-calendar-container .calendar-table-wrapper table td{color:{validDateTextColor};background-color:{validDateBgColor};border-bottom: 1px solid {validDateBorderColor};border-right: 1px solid {validDateBorderColor};}.capricorncd-calendar-container .calendar-table-wrapper table td.valid-hook:hover{background-color:{validDateHoverBgColor};}.capricorncd-calendar-container .calendar-table-wrapper table td.valid-hook:hover b, .capricorncd-calendar-container .calendar-table-wrapper table td.valid-hook:hover p{color: {validDateHoverTextColor}}.capricorncd-calendar-container .calendar-table-wrapper table td.disabled{color:{invalidDateTextColor};background-color:{invalidDateBgColor}; border-bottom: 1px solid {invalidDateBorderColor};border-right: 1px solid {invalidDateBorderColor};}.capricorncd-calendar-container .calendar-foot-wrapper, .capricorncd-date-detailed-settings .cddsw-foot-wrapper{background-color:{footerBgColor}}.capricorncd-calendar-container .calendar-foot-wrapper button.btn-reset{background-color: {resetBtnBgColor};border: 1px solid {resetBtnBgColor};color: {resetBtnTextColor}}.capricorncd-calendar-container .calendar-foot-wrapper button.btn-reset:hover{background-color: {resetBtnHoverBgColor};border: 1px solid {resetBtnHoverBgColor};color: {resetBtnHoverTextColor}}.capricorncd-calendar-container .calendar-foot-wrapper button.btn-confirm, .capricorncd-date-detailed-settings .cddsw-foot-wrapper button.btn-confirm {background-color: {confirmBtnBgColor};border: 1px solid {confirmBtnBgColor};color: {confirmBtnTextColor}}.capricorncd-calendar-container .calendar-foot-wrapper button.btn-confirm:hover, .capricorncd-date-detailed-settings .cddsw-foot-wrapper button.btn-confirm:hover {background-color: {confirmBtnHoverBgColor};border: 1px solid {confirmBtnHoverBgColor};color: {confirmBtnHoverTextColor}}.capricorncd-calendar-container .calendar-foot-wrapper button.btn-cancel, .capricorncd-date-detailed-settings .cddsw-foot-wrapper button.btn-cancel {background-color: {cancelBtnBgColor};color:{cancelBtnTextColor};border: 1px solid {cancelBtnBorderColor};}.capricorncd-calendar-container .calendar-foot-wrapper button.btn-cancel:hover, .capricorncd-date-detailed-settings .cddsw-foot-wrapper button.btn-cancel:hover {background-color: {cancelBtnHoverBgColor};border-color: {cancelBtnHoverBorderColor};color: {cancelBtnHoverTextColor}}",
        reg = null;
      for (var key in concatStyle) reg = eval("/{" + key + "}/g"), templateStyle = templateStyle.replace(reg, concatStyle[key]);
      $("head").append("<style>" + templateStyle + "</style>")
    }
  }, fn.sort = function(t) {
    if (!(t instanceof Array)) return this.ev.error && this.$emit("error", _err(8)), this.opts.error(_err(8)), t;
    if (t.length < 1) return t;
    for (var e = 0, a = null, r = 0; r < t.length; r++)
      for (var n = (e = r) + 1; n < t.length; n++) t[n].date < t[e].date && (e = n, a = t[r], t.splice(r, 1, t[n]), t.splice(n, 1, a));
    return t
  }, fn.rmRepeat = function(t, e) {
    for (var a = {}, r = [], n = 0; n < t.length; n++) {
      var o = t[n];
      if (e) try {
        o = t[n][e]
      } catch (t) {}
      a[o] || (r.push(t[n]), a[o] = !0)
    }
    return r
  }, fn.getMonthData = function() {
    var t, e, a = formatDate(this.month, "yyyy-MM"),
      r = new RegExp("^" + a + "-\\d+"),
      n = [];
    for (t = 0; t < this.data.length; t++) e = this.data[t], r.test(e.date) && n.push(e);
    return {
      month: a,
      data: n
    }
  }, fn.update = function(t) {
    if (!(t && t instanceof Array)) return this.ev.error && this.$emit("error", _err(9)), void this.opts.error(_err(9));
    var e, a, r, n;
    for (r = this.rmRepeat(t, "date"), e = 0; e < r.length; e++)(a = r[e]).stock *= 10, null === (n = this._getArrIndex(a, this.data)) ? this.data.push(a) : this.data.splice(n, 1, a);
    this.renderDataToTalbe()
  }, fn._getArrIndex = function(t, e) {
    for (var a = 0; a < e.length; a++)
      if (t.date == e[a].date) return a;
    return null
  }, $.extend({
    CalendarPrice: function(t) {
      return new CalendarPrice(t)
    }
  })
}(jQuery);
